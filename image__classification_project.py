# -*- coding: utf-8 -*-
"""Image_ Classification_Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1y9T9uZCw6DJl2FcAlCtnpfTR5aFymc4U
"""

# Commented out IPython magic to ensure Python compatibility.
#Importing dependencies
import numpy as np
import pandas as pd
from matplotlib import pyplot as plt
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.impute import SimpleImputer
# %matplotlib inline

#Using pandas to read the database stored in the same folder
data=pd.read_csv("mnist_train.csv")

#viewing column heads
data.head()

#Extracting data from the dataset and viewing them up close
a=data.iloc[3,1:].values

#Reshaping the extracted data into a reasonable size
a=a.reshape(28,28).astype('uint8')
plt.imshow(a)

#Preparing the data
#Separating labels and data values
df_x=data.iloc[:,1:]
df_y=data.iloc[:,0]

#Creating test and train sizes/batches
x_train, x_test, y_train, y_test = train_test_split(df_x, df_y, test_size=0.2, random_state=4)

# Impute missing values using the mean strategy
imputer = SimpleImputer(strategy='mean') # Create an imputer instance
x_train = imputer.fit_transform(x_train) # Fit and transform the training data
x_test = imputer.transform(x_test) # Transform the test data using the same imputer

#Check data
y_train.head()

#Call rf classifier
rf=RandomForestClassifier(n_estimators=100)

#Fit the model
rf.fit(x_train, y_train)

#Predictions on test data
pred=rf.predict(x_test)
pred

#Check prediction accuracy
s=y_test.values

#Calculate number of correctly predicted values
count=0
for i in range(len(pred)):
    if pred[i]==s[i]:
        count=count+1
count

#Total values that the prediction code was run on
len(pred)

#Calculate accuracy
count/len(pred)*100